# -*- fill-column: 80; org-confirm-babel-evaluate: nil -*-

#+TITLE:     Assignment 11, Discrete Mathematics
#+AUTHOR:    Oleg Sivokon
#+EMAIL:     olegsivokon@gmail.com
#+DATE:      <2015-03-21 Sat>
#+DESCRIPTION: First asssignment in the course Discrete Mathematics
#+KEYWORDS: Discrete Mathematics, Assignment, Set Theory
#+LANGUAGE: en
#+LaTeX_CLASS: article
#+LATEX_HEADER: \usepackage[usenames,dvipsnames]{color}
#+LATEX_HEADER: \usepackage[backend=bibtex, style=numeric]{biblatex}
#+LATEX_HEADER: \usepackage{commath}
#+LATEX_HEADER: \usepackage{tikz}
#+LATEX_HEADER: \usetikzlibrary{shapes,backgrounds}
#+LATEX_HEADER: \usepackage{marginnote}
#+LATEX_HEADER: \usepackage{listings}
#+LATEX_HEADER: \usepackage{color}
#+LATEX_HEADER: \usepackage{enumerate}
#+LATEX_HEADER: \hypersetup{urlcolor=blue}
#+LATEX_HEADER: \hypersetup{colorlinks,urlcolor=blue}
#+LATEX_HEADER: \addbibresource{bibliography.bib}
#+LATEX_HEADER: \setlength{\parskip}{16pt plus 2pt minus 2pt}
#+LATEX_HEADER: \definecolor{codebg}{rgb}{0.96,0.99,0.8}
#+LATEX_HEADER: \definecolor{codestr}{rgb}{0.46,0.09,0.2}

#+BEGIN_SRC emacs-lisp :exports none
(setq org-latex-pdf-process
        '("latexmk -pdflatex='pdflatex -shell-escape -interaction nonstopmode' -pdf -bibtex -f %f")
        org-latex-listings t
        org-src-fontify-natively t
        org-babel-latex-htlatex "htlatex")
(defmacro by-backend (&rest body)
    `(cl-case (when (boundp 'backend) (org-export-backend-name backend))
       ,@body))
#+END_SRC

#+RESULTS:
: by-backend

#+BEGIN_LATEX
  \lstset{ %
    backgroundcolor=\color{codebg},
    basicstyle=\ttfamily\scriptsize,
    breakatwhitespace=false,         % sets if automatic breaks should only happen at whitespace
    breaklines=false,
    captionpos=b,                    % sets the caption-position to bottom
    commentstyle=\color{mygreen},    % comment style
    framexleftmargin=10pt,
    xleftmargin=10pt,
    framerule=0pt,
    frame=tb,                        % adds a frame around the code
    keepspaces=true,                 % keeps spaces in text, useful for keeping indentation of code (possibly needs columns=flexible)
    keywordstyle=\color{blue},       % keyword style
    showspaces=false,                % show spaces everywhere adding particular underscores; it overrides 'showstringspaces'
    showstringspaces=false,          % underline spaces within strings only
    showtabs=false,                  % show tabs within strings adding particular underscores
    stringstyle=\color{codestr},     % string literal style
    tabsize=2,                       % sets default tabsize to 2 spaces
  }
#+END_LATEX

\clearpage

* Problems

** Problem 1
   In all questions that follow, establish whether $x \in y$ or $x \subseteq y$.
   1. $x = \{1, 2\}, y = \{1, 2, 3\}$.
   2. $x = \{3\}, y = \{\{1\}, \{2\}, \{3\}\}$.
   3. $x = \{1, 2\}, y = \{\{1, 2\}, 3\}$.
   4. $x = \{1, 3\}, y = \{\{1, 2\}, 3\}$.
   5. $x = \emptyset, y = \emptyset$.
   6. $x = \{\emptyset\}, y = \{\emptyset\}$.
   7. $x = \{1\}, y = \{1, 2\}$.
   8. $x = \emptyset, y = P(\{1, 2, 3\})$.

*** Answer 1
    1. $x \subseteq y$.
    2. $x \in y$.
    3. $x \in y$.
    4. $x \not \in y \land x \not \subseteq y$.
    5. $x \subseteq y$.
    6. $x \subseteq y$.
    7. $x \subseteq y$.
    8. $x \subseteq y$.

** Problem 2
   Prove or disprove:
   1. $(A \setminus B) \setminus B = A \setminus B$.
   2. $A \setminus (B \setminus A) = A$.
   3. $A \subseteq P(A)$.

*** Answer 2
    The statement is true.  Suppose for contradiction that there is a $b \in A
    \setminus B$ s.t. $b \not \in (A \setminus B) \setminus B$.  Then, we know
    that $b \in A$ and $b \not \in B$.  But we assumed $b \not \in A \lor b \in
    B$.  This is a contradiction, hence $(A \setminus B) \setminus B = A
    \setminus B$.  Additionally, it is easy to see that set subtraction is
    idempotent (i.e. if applied repeatedly, will yield the same result after
    first application).

*** Answer 3
    The statement is true.  Suppose for contradiction there was an $a \in A$,
    which is not in $A \setminus (B \setminus A)$.  Then such $a$ would have
    to be in $A$, but not in $(B \setminus A)$.  I will now show that no elements
    of $(B \setminus A)$ is in $A$, thus subtracting this group would not
    remove any elements of $A$, i.e. $A \cap (B \setminus A) = \emptyset$.
    Suppose $b$ was in $A$ and in $(B \setminus A)$ at the same time, then
    it would have to be in $A$, but $A$ is excluded from $(B \setminus A)$.
    This is in contradiction to the previous assumtion.  Therefore
    $A \setminus (B \setminus A) = A$.

*** Answer 4
    This statement isn't true in general.  An example which disproves it would
    be an assignment: $A=\{1, 2\}$.  $P(A)=\{\emptyset, \{1\}, \{2\}, \{1, 2\}\}$.
    $A \not \subseteq P(A)$.

** Problem 3
   Prove the following identity using $A \setminus B = A \cap B'$:
   $(A_1 \cup A_2) \setminus (B_1 \cap B_2) = (A_1 \cup B_1) \cup (A_1 \cup B_2)
   \cup (A_2 \cup B_1) \cup (A_2 \cup B_2)$.

*** Answer 5
    The proof doesn't require discussion.  It is accomplished by simple
    set-theoretical manipulations.
    #+HEADER: :exports results
    #+HEADER: :results (by-backend (pdf "latex") (t "raw"))
    #+BEGIN_SRC latex
      \begin{equation*}
        \begin{aligned}
          (A_1 \cup A_2) \setminus (B_1 \cap B_2) &\iff
          &\textrm{Given} \\
          A_1 \setminus (B_1 \cap B_2) \cup A_2 \setminus (B_1 \cap B_2) &\iff
          &\textrm{Union over subtraction} \\
          A_1 \cap (B_1 \cap B_2)' \cup A_2 \cap (B_1 \cap B_2)' &\iff
          &\textrm{Required identity} \\
          A_1 \cap (B_1' \cup B_2') \cup A_2 \cap (B_1' \cup B_2') &\iff
          &\textrm{De Morgan's law} \\
          (A_1 \cap B_1') \cup (A_1 \cap B_2') \cup
          (A_2 \cap B_1') \cup (A_2 \cap B_2') &\iff
          &\textrm{Union over subtraction} \\
          (A_1 \setminus B_1) \cup (A_1 \setminus B_2)
          \cup (A_2 \setminus B_1) \cup (A_2 \setminus B_2) &\iff
          &\textrm{Required identity}
        \end{aligned}
      \end{equation*}
    #+END_SRC

** Problem 4
   Given $\forall n \in \mathbb{N}: A_n = \{x \in \mathbb{R} | 4 \leq x \leq
   2n + 2 \}$ and $\forall n \in \mathbb{N}: B_n = A_{n+1} \setminus A_n$.
   /For the purpose of this exercise/ $\mathbb{N}$ /contains zero./
   1. Calculate $A_0, A_1, A_2, A_3$ and $B_0, B_1, B_2$.
   2. Write closed-form formula for $B_n$.
   3. Calculate $\bigcup_{2 \leq n \in \mathbb{N}}B_n$.  Prove the result
      using set containment relation.
   4. Using general rules for set subtraction and union as well as De Morgan
      laws as applied to universal and existential quantifiers, prove the
      generalized formulae for $\bigcup_{i \in I}(A')$ and 
      $\bigcap_{i \in I}(A')$.
   5. Let $D_n = \mathbb{R} \setminus B_n$.  Calculate 
      $\bigcup_{2 \leq n \in \mathbb{N}}D_n$.

*** Answer 6
    It is easy to do the calculation by hand, but to make it more interesting
    I wrote some Prolog code to do it.  An intuitive way to see what is going
    on is to observe that every consequent $A$ will contain the entire previous
    set and two more members, which are greater than the maximal element of
    the previously collected set.

    #+HEADER: :system swipl :exports both :results raw
    #+HEADER: :goal question_1(3, 3, X, Y).
    #+BEGIN_SRC prolog
      :- use_module(library(clpfd)).
      
      set_A(N, Set) :- 
          High is N * 2 + 2,
          X in 4..High,
          findall(X, indomain(X), Set).
      
      set_B(N, Set) :-
          set_A(N, A_n),
          N1 is N + 1,
          set_A(N1, A_n1),
          subtract(A_n1, A_n, Set).
      
      all_sets(N, Pred, Answer) :-
          X in 1..N, indomain(X),
          call(Pred, X, Answer).
      
      zip(X, Y, [X, Y]).
      
      join(_, [X], X) :- !.
      join(Sep, [X | Xs], S) :-
          join(Sep, Xs, Sx),
          string_concat(Sep, Sx, Sy),
          string_concat(X, Sy, S).
      
      question_1(Na, Nb, As, Bs):-
          findall(As, all_sets(Na, set_A, As), As),
          findall(Bs, all_sets(Nb, set_B, Bs), Bs),
          X in 1..Na,
          Y in 1..Nb,
          findall(X, indomain(X), Nas),
          findall(Y, indomain(Y), Nbs),
          maplist(join(','), As, Jas),
          maplist(join(','), Bs, Jbs),
          maplist(zip, Nas, Jas, Zas),
          maplist(zip, Nbs, Jbs, Zbs),
          maplist(format('$A_~p=\\{~p\\}$~n~n'), Zas),
          maplist(format('$B_~p=\\{~p\\}$~n~n'), Zbs).
    #+END_SRC

*** Answer 7
    $B = \{x \in \mathbb{R} | 2(n+1) < x \leq 2(n+2)\}$.

*** Answer 8
    First, let me make the claim that $\bigcup_{2 \leq n \in \mathbb{N}}=A_{n+1}$.
    Below, is the proof that doesn't require division in two cases (it peruses
    the definition of $B_n$ and the general technique of extraction of the last
    term of a sequence).

    #+HEADER: :exports results
    #+HEADER: :results (by-backend (pdf "latex") (t "raw"))
    #+BEGIN_SRC latex
      \begin{equation*}
        \begin{aligned}
          \bigcup_{2 \leq n \in \mathbb{N}} B_n &=
          \bigcup_{2 \leq n \in \mathbb{N}} A_{n+1} \setminus A_n \\
          &= \bigcup_{2 \leq n \in \mathbb{N}} A_{n+1} \setminus
          \bigcup_{2 \leq n \in \mathbb{N}} A_n \\
          &= \bigcup_{2 \leq n \in \mathbb{N}} A_n \setminus
          \bigcup_{2 \leq n \in \mathbb{N}} A_n \cup A_{n+1} \\
          &= A_{n+1}
        \end{aligned}
      \end{equation*}
    #+END_SRC

*** Answer 9
    First, let me reiterate De Morgan's law for first-order quantifiers:
    #+HEADER: :exports results
    #+HEADER: :results (by-backend (pdf "latex") (t "raw"))
    #+BEGIN_SRC latex
      \begin{equation*}
        \begin{aligned}
          \lnot \forall x. \phi \iff \exists x. \lnot \phi.
        \end{aligned}
      \end{equation*}
    #+END_SRC
    Combining it with the definitions of union of complement sets and
    intersection of complement sets gives us the following proof:

    #+HEADER: :exports results
    #+HEADER: :results (by-backend (pdf "latex") (t "raw"))
    #+BEGIN_SRC latex
      \begin{equation*}
        \begin{aligned}
          x \in \bigcap_{i \in I} (A_i)'
          &\iff \forall i (i \in I \implies x \in A') \\
          &\iff \exists i (i \in I \implies x \in A)' \\
          &\iff x \in (\bigcup_{i \in I} A_i)'.
        \end{aligned}
      \end{equation*}
    #+END_SRC
    /Note that the proof treats negation equivalently to complementation./

    The proof for the union is symmetrical:
    #+HEADER: :exports results
    #+HEADER: :results (by-backend (pdf "latex") (t "raw"))
    #+BEGIN_SRC latex
      \begin{equation*}
        \begin{aligned}
          x \in \bigcup_{i \in I} (A_i)'
          &\iff \exists i (i \in I \implies x \in A') \\
          &\iff \forall i (i \in I \implies x \in A)' \\
          &\iff x \in (\bigcap_{i \in I} A_i)'.
        \end{aligned}
      \end{equation*}
    #+END_SRC

*** Answer 10
    Reusing definitions and conclusions derived above gives:
    #+HEADER: :exports results
    #+HEADER: :results (by-backend (pdf "latex") (t "raw"))
    #+BEGIN_SRC latex
      \begin{equation*}
        D_n = \mathbb{R} \setminus B_n = \mathbb{R} \cap (B_n)'.
      \end{equation*}
      \begin{equation*}
        \begin{aligned}
          \bigcap_{2 \leq n \in \mathbb{N}} D_n
          &= \bigcap_{2 \leq n \in \mathbb{N}} \mathbb{R} \cap (B_n)' \\
          &= \mathbb{R} \cap \bigcap_{2 \leq n \in \mathbb{N}} (B_n)' \\
          &= \mathbb{R} \cap (\bigcup_{2 \leq n \in \mathbb{N}} B_n)' \\
          &= \mathbb{R} \cap (\bigcup_{2 \leq n \in \mathbb{N}} A_{n+1} \setminus A_n)' \\
          &= \mathbb{R} \cap (\bigcup_{2 \leq n \in \mathbb{N}} A_{n+1}
          \setminus \bigcup_{2 \leq n \in \mathbb{N}} A_n)' \\
          &= \mathbb{R} \cap (\bigcup_{2 \leq n \in \mathbb{N}} A_{n+1}
          \cap (\bigcup_{2 \leq n \in \mathbb{N}} A_n)')' \\
          &= \mathbb{R} \cap (\bigcup_{2 \leq n \in \mathbb{N}} A_{n+1})'
          \cup (\bigcup_{2 \leq n \in \mathbb{N}} A_n)' \\
          &= \mathbb{R} \cap (A_{n+1})' \\
          &= \mathbb{R} \setminus A_{n+1}
        \end{aligned}
      \end{equation*}
    #+END_SRC
